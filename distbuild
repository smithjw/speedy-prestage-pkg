#!/bin/zsh
# shellcheck shell=bash

chmod +x ./*/scripts/*

if [ -z "$1" ]; then
    echo "Please include the desired name of the package when running this script"
    echo 'eg ./distbuild "PreStage" "1.0"'

    exit 0
elif [ -z "$2" ]; then
    echo "Please include the package version number when running this script"
    echo 'eg ./distbuild "PreStage" "1.0"'

    exit 0
fi

package_name="$1-$2.pkg"
apps_name_prefix="PreStage_Apps"
assets_name_prefix="PreStage_Assets"
package_identifier="com.gihub.smithjw.speedy-prestage"
certificate_name="Developer ID Installer: COMPANY_NAME_HERE"
provider="PROVIDER_NUMBER"
dev_email="DEV_ACCOUNT_EMAIL"
dev_password_name="distbuild-$dev_email"
keychain_account="KEYCHAIN_ACCOUNT_USERNAME"

# Build component packages 
pkgbuild --sign "$certificate_name" --root "$apps_name_prefix"/pkgroot --scripts "$apps_name_prefix"/scripts \
    --identifier com.github.smithjw.prestage_apps --version "$2" "$apps_name_prefix"-"$2".pkg
pkgbuild --sign "$certificate_name" --root "$assets_name_prefix"/pkgroot --identifier comp.github.smithjw.prestage_assets \
    --version "$2" "$assets_name_prefix"-"$2".pkg

# Build distribution package and sign
productbuild --sign "$certificate_name" --package "$assets_name_prefix"-"$2".pkg \
    --package "$apps_name_prefix"-"$2".pkg "$package_name"

# Remove temp packages
rm "$assets_name_prefix"-"$2".pkg
rm "$apps_name_prefix"-"$2".pkg

if [ -n "$3" ]; then
    echo 'Skipping Notarization'
    exit 0
fi

# Grab password from the keychain from Scripting OSX
# https://scriptingosx.com/2021/04/get-password-from-keychain-in-shell-scripts/

if ! dev_password=$(security find-generic-password -w -s "$dev_password_name" -a "$keychain_account"); then
    echo "could not get password, error $?"
    exit 1
fi

# Send the package for notarization
xcrun altool --notarize-app --primary-bundle-id "$package_identifier" --username "$dev_email" \
    --password "$dev_password" --asc-provider "$provider" --file "$package_name" &> notarize_pkg

notarization_uuid=$(< notarize_pkg grep -Eo '\w{8}-(\w{4}-){3}\w{12}$')

while true; do
    echo "Checking Notarization Status"

    xcrun altool --notarization-info "$notarization_uuid" --username "$dev_email" \
        --password "$dev_password" --asc-provider "$provider" &> notarize_status
    
    notarization_progress=$(< notarize_status grep "success")
    notarization_failure=$(< notarize_status grep "invalid")
    
    if [[ "$notarization_progress" != "" ]]; then
        echo "Notarization Complete!"
        xcrun stapler staple "$package_name"
        echo "Stapling Complete!"

        # Removing temp files
        rm notarize_status notarize_pkg
        break
    elif [[ "$notarization_failure" != "" ]]; then
        echo notarization_status
        return 1
    fi
    
    echo "Notarization is still in progress, checking again in 30 seconds"
    sleep 30
done

exit 0

